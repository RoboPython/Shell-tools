#!/bin/bash

set -e

source `dirname $0`/colours
NO_ARGS=0
VERBOSE=off
USAGE="$0 [-v] [-h] [-r remote-drupal-root] [-l local-drupal-root] [[-b <major|minor|bump>] | [-f release]] [-m mysql-root-pass] remoteuser remotehost"

if [ $# -eq "$NO_ARGS" ]; then
    echo $USAGE
    exit 1
fi

# Set defaults
DRUPAL_REMOTE_ROOT=/var/www/latest
DRUPAL_LOCAL_ROOT=`pwd`

#################################
# Functions

function getRemotePath {
    export RPATH=`ssh $RUSER@$RHOST realpath /var/www/latest`
    export CURRENT=`basename $RPATH`
}

function getVersionElements {
    export BRAND=`echo $1|awk '{split($0,a,"_"); print a[1]}'`
    export NOBC=`echo $1|awk '{split($0,a,"_"); print a[2]}'`
    if [ "$BRAND" == "$1" ]; then
        NOBC=$BRAND
        unset BRAND
    fi
    export MAJOR_VERSION=`echo $NOBC|awk '{split($0,a,"."); print a[1]}'`
    export MINOR_VERSION=`echo $NOBC|awk '{split($0,a,"."); print a[2]}'`
    export PATCH_VERSION=`echo $NOBC|awk '{split($0,a,"."); print a[3]}'`
}

function debug {
    if [ ! -z "$VERBOSE" ]; then
        echo -e $1
    fi
}

function usage {
    echo $USAGE
    cat <<EOF

Take a local drupal install and publish it to a remote site.  It wll create a
DB and copy the 'live' site into it. This script needs to have an existing site
in place to operate on and that site must have a functional drush alias. The 
files from the local site will be pushed up to the live site and the current
live site databse will be copied into the new drupal.

Manadtory Parameters
--------------------
remoteuser
  This user MUST have passwordless key based authentication to the remote 
  server. An ssh-agent can be used but the process should be non-interactive
remotehost
  The host to publish the site to.

Optional Parameters
-------------------
-v
  Be verbose
-h
  Print this message
-r remote-drupal-root
  The path to the root of the current drupal root. It is the DB from this
  instance that will be installed into the new release. Defaults to:
  /var/www/latest
-b <major|minor|bump>]
  Sites are release in a x.y.z format where versions are major.minor.patch
  The script will bump that version by one in the category specified. If
  ommitted the script will ask.
-f release
  If specified this release value will override the m.m.p number
-m mysql-root-pass
  The script expects to find the remote mysql root password in an environment
  variable MYSQL_ROOT_PASSWORD. This parameter can override that.
EOF
}

# End functions
###############################

# OPTS=`getopt -o v -r drupal_remote_root -l drupal_local_root -b bumpup -f force-version: -- "$@"`

while getopts "r:l:b:f:m:vh" options; do
    case $options in
        v) VERBOSE='verbose';;
        h) usage; exit 0;;
        r) DRUPAL_REMOTE_ROOT="$OPTARG";;
        l) DRUPAL_LOCAL_ROOT="$OPTARG";;
        b) BUMP="$OPTARG";;
        f) RELEASE="$OPTARG";;
        m) MYSQL_ROOT_PASSWORD="$OPTARG";; 
    esac
done

shift $((OPTIND-1))
RUSER=$1
RHOST=$2

# Check we have required params
if [ -z $RUSER ]; then
    echo -e $COL_RED"Missing remote user"$COL_RESET
    echo $USAGE
    exit 1
elif [ -z $RHOST ]; then
    echo -e $COL_RED"Missing remote host"$COL_RESET
    echo $USAGE
    exit 1
elif [ -z "$DRUPAL_LOCAL_ROOT" ] || [ ! -f "$DRUPAL_LOCAL_ROOT/cron.php" ]; then
    echo -e $COL_RED"The local drupal root ($DRUPAL_LOCAL_ROOT) does not seem to be a drupal site"$COL_RESET
    exit 1
fi

getRemotePath
getVersionElements $CURRENT
RBASE=`dirname $RPATH`

# If we don't have a alias file in the current site we can't proceed
set +e # turn off exit on error here
RALIAS=$RPATH/sites/all/drush/$CURRENT.alias.drushrc.php
ssh $RUSER@$RHOST ls $RALIAS > /dev/null
if [ "$?" != '0' ]; then
    echo -e $COL_RED"Cannot find alias file for remote site\n  ssh $RUSER@$RHOST ls $RALIAS"$COL_RESET
fi
set -e

if [ -z "$RELEASE" ]; then
    until [ "$BUMP" == "patch" ] || [ "$BUMP" == "minor" ] || [ "$BUMP" == "major" ]; do
        echo -e "Current version on remote site: ${COL_GREEN}${CURRENT}${COL_RESET}"
        echo -n "Bump which version Major|mInor|Patch? [m/i/P]? "
        read a
        case $a in
            M) BUMP=major;;
            m) BUMP=major;;
            I) BUMP=minor;;
            i) BUMP=minor;;
            P) BUMP=patch;;
            p) BUMP=patch;;
        esac
    done

    case $BUMP in
        patch) PATCH_VERSION=$(($PATCH_VERSION + 1));;
        minor) MINOR_VERSION=$(($MINOR_VERSION + 1)); PATCH_VERSION=0;;
        major) MAJOR_VERSION=$(($MAJOR_VERSION + 1)); MINOR_VERSION=0; PATCH_VERSION=0;;
    esac

    RELEASE="${BRAND}_${MAJOR_VERSION}.${MINOR_VERSION}.${PATCH_VERSION}"
fi

# Quick sanity check
if [ "$BRAND" != `basename $DRUPAL_LOCAL_ROOT` ]; then
    echo -e $COL_YELLOW"Brand code from remote ($BRAND) != Sniffed BC from $DRUPAL_LOCAL_ROOT"$COL_RESET
fi

touch $DRUPAL_LOCAL_ROOT/changelog.txt
echo "+----- $RELEASE -----+" > $DRUPAL_LOCAL_ROOT/changelog.new
branches -l -p $DRUPAL_LOCAL_ROOT >> $DRUPAL_LOCAL_ROOT/changelog.new
echo -e "\n" >> $DRUPAL_LOCAL_ROOT/changelog.new
cat $DRUPAL_LOCAL_ROOT/changelog.txt >> $DRUPAL_LOCAL_ROOT/changelog.new
mv $DRUPAL_LOCAL_ROOT/changelog.new $DRUPAL_LOCAL_ROOT/changelog.txt

ALIAS_FILE=$DRUPAL_LOCAL_ROOT/sites/all/drush/$RELEASE.alias.drushrc.php

echo '<?php' > $ALIAS_FILE
drush -r $DRUPAL_LOCAL_ROOT sa --full --with-db @self >> $ALIAS_FILE
sed -i "s/'root' => .*/'root' => '\/var\/www\/$RELEASE',/g" $ALIAS_FILE
sed -i "s/self/$RELEASE/g" $ALIAS_FILE
sed -i "/#name/a  'remote-host' => '${RHOST}'," $ALIAS_FILE
sed -i "/#name/a  'remote-user' => '${RUSER}'," $ALIAS_FILE

debug "+-------------------------------------------------+"
debug "${COL_BLUE}Remote user${COL_RESET}         $RUSER"
debug "${COL_BLUE}Remote host${COL_RESET}         $RHOST"
debug "${COL_BLUE}remote path${COL_RESET}         $RPATH"
debug "${COL_BLUE}local path${COL_RESET}          $DRUPAL_LOCAL_ROOT"
debug "${COL_BLUE}current${COL_RESET}             $CURRENT"
debug "${COL_BLUE}version from remote${COL_RESET} $BRAND / $MAJOR_VERSION / $MINOR_VERSION / $PATCH_VERSION"
debug "${COL_BLUE}version passed${COL_RESET}      $RELEASE"
debug "${COL_BLUE}bump${COL_RESET}                $BUMP"
debug "${COL_BLUE}aliasfile${COL_RESET}           $ALIAS_FILE"
debug "+-------------------------------------------------+"

cat <<EOF
This command will now push the local site at:
  ${DRUPAL_LOCAL_ROOT} to ${RHOST}:/var/www/${RELEASE}
We will create a database on ${RHOST}
  mysql-create-user-and-db -u $RELEASE -p $RELEASE
Can sync the databse from:
  ${RHOST}:/var/www/${CURRENT} to ${RHOST}:/var/www/${RELEASE}

Proceed (y/N)?
EOF

read a
if [ "$a" != 'y' ] && [ "$a" != 'Y' ]; then
    echo Aborting
    exit 0
fi

echo -e $COL_GREEN"Creating remote DB"$COL_RESET
ssh ${RUSER}@${RHOST} "bash mysql-create-user-and-db -u $RELEASE -p $RELEASE -m $MYSQL_ROOT_PASSWORD"
EXITSTATUS=$?
stty echo > /dev/null
if [ "$EXITSTATUS" != 0 ]; then
    exit 1
fi

echo -e $COL_GREEN"Prepare ${RELEASE}_settings.php for release"$COL_RESET
LOCAL_SETTINGS=$DRUPAL_LOCAL_ROOT/sites/default/settings.php
TMP_SETTINGS=$DRUPAL_LOCAL_ROOT/sites/default/${RELEASE}_settings.php
cp $LOCAL_SETTINGS $TMP_SETTINGS
sed -i "s/      'database' => .*/      'database' => '$RELEASE',/g" $TMP_SETTINGS
sed -i "s/      'username' => .*/      'username' => '$RELEASE',/g" $TMP_SETTINGS
sed -i "s/      'password' => .*/      'password' => '$RELEASE',/g" $TMP_SETTINGS

echo -e $COL_GREEN"Sync $DRUPAL_LOCAL_ROOT up to $RPATH"$COL_RESET
drush -r $DRUPAL_LOCAL_ROOT rsync @self @$RELEASE --include-conf --include-vcs
REMOTE_SETTINGS=/var/www/$RELEASE/sites/default/settings.php
scp $TMP_SETTINGS ${RUSER}@${RHOST}:$REMOTE_SETTINGS

echo -e $COL_GREEN"Importing DB"$COL_RESET
echo drush -r $DRUPAL_LOCAL_ROOT sql-sync @$CURRENT @$RELEASE

exit

echo -e $COL_GREEN"Clear caches"$COL_RESET
drush -r $DRUPAL_LOCAL_ROOT @$RELEASE cc all

echo -e $COL_GREEN"Done. You may now need to create/delete symlinks to actaully send it live"$COL_RESET
